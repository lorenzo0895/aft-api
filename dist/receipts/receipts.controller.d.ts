import { ReceiptsService } from './receipts.service';
import { CreateReceiptDto } from './dto/create-receipt.dto';
import { UpdateReceiptDto } from './dto/update-receipt.dto';
import { UpdateReceiptDescriptionDto } from './dto/update-receipt-description.dto';
export declare class ReceiptsController {
    private readonly receiptsService;
    constructor(receiptsService: ReceiptsService);
    findAll(start: Date, end: Date, client: number, take: number): Promise<import("./entities/receipt.entity").Receipt[]>;
    findOne(id: string): Promise<{
        cancelledBy: import("./entities/receipt.entity").Receipt;
        id: number;
        number: number;
        day: import("../days/entities/day.entity").Day;
        client: import("../clients/entities/client.entity").Client;
        transferAmount: number;
        description: string;
        cash: number;
        cheques: import("../cheques/entities/cheque.entity").Cheque[];
        cancelCheques: import("../cheques/entities/cheque.entity").Cheque[];
        conceptItems: import("../concept-items/entities/concept.entity").ConceptItem[];
        user: import("../users/entities/user.entity").User;
        cancelReceipt: import("./entities/receipt.entity").Receipt;
        isActive: boolean;
        isCancelled: boolean;
    }>;
    report(start: Date, end: Date, orderBy: 'receipt' | 'client', client?: number | undefined): Promise<import("./entities/receipt.entity").Receipt[]>;
    xubio(start: Date, end: Date): Promise<any[]>;
    create(createReceiptDto: CreateReceiptDto): Promise<{
        cancelledBy: import("./entities/receipt.entity").Receipt;
        id: number;
        number: number;
        day: import("../days/entities/day.entity").Day;
        client: import("../clients/entities/client.entity").Client;
        transferAmount: number;
        description: string;
        cash: number;
        cheques: import("../cheques/entities/cheque.entity").Cheque[];
        cancelCheques: import("../cheques/entities/cheque.entity").Cheque[];
        conceptItems: import("../concept-items/entities/concept.entity").ConceptItem[];
        user: import("../users/entities/user.entity").User;
        cancelReceipt: import("./entities/receipt.entity").Receipt;
        isActive: boolean;
        isCancelled: boolean;
    }>;
    update(id: string, updateReceiptDto: UpdateReceiptDto): Promise<import("./entities/receipt.entity").Receipt>;
    updateDescription(id: string, updateReceiptDescriptionDto: UpdateReceiptDescriptionDto): Promise<import("./entities/receipt.entity").Receipt>;
    close(id: string): Promise<{
        cancelledBy: import("./entities/receipt.entity").Receipt;
        id: number;
        number: number;
        day: import("../days/entities/day.entity").Day;
        client: import("../clients/entities/client.entity").Client;
        transferAmount: number;
        description: string;
        cash: number;
        cheques: import("../cheques/entities/cheque.entity").Cheque[];
        cancelCheques: import("../cheques/entities/cheque.entity").Cheque[];
        conceptItems: import("../concept-items/entities/concept.entity").ConceptItem[];
        user: import("../users/entities/user.entity").User;
        cancelReceipt: import("./entities/receipt.entity").Receipt;
        isActive: boolean;
        isCancelled: boolean;
    }>;
    open(id: string): Promise<{
        cancelledBy: import("./entities/receipt.entity").Receipt;
        id: number;
        number: number;
        day: import("../days/entities/day.entity").Day;
        client: import("../clients/entities/client.entity").Client;
        transferAmount: number;
        description: string;
        cash: number;
        cheques: import("../cheques/entities/cheque.entity").Cheque[];
        cancelCheques: import("../cheques/entities/cheque.entity").Cheque[];
        conceptItems: import("../concept-items/entities/concept.entity").ConceptItem[];
        user: import("../users/entities/user.entity").User;
        cancelReceipt: import("./entities/receipt.entity").Receipt;
        isActive: boolean;
        isCancelled: boolean;
    }>;
    cancel(id: string): Promise<{
        cancelledBy: import("./entities/receipt.entity").Receipt;
        id: number;
        number: number;
        day: import("../days/entities/day.entity").Day;
        client: import("../clients/entities/client.entity").Client;
        transferAmount: number;
        description: string;
        cash: number;
        cheques: import("../cheques/entities/cheque.entity").Cheque[];
        cancelCheques: import("../cheques/entities/cheque.entity").Cheque[];
        conceptItems: import("../concept-items/entities/concept.entity").ConceptItem[];
        user: import("../users/entities/user.entity").User;
        cancelReceipt: import("./entities/receipt.entity").Receipt;
        isActive: boolean;
        isCancelled: boolean;
    }>;
    remove(id: string): Promise<import("typeorm").DeleteResult>;
}
