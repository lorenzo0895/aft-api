import { Cheque } from 'src/cheques/entities/cheque.entity';
import { DataSource, Repository } from 'typeorm';
import { CreateReceiptDto } from './dto/create-receipt.dto';
import { UpdateReceiptDto } from './dto/update-receipt.dto';
import { Receipt } from './entities/receipt.entity';
import { UpdateReceiptDescriptionDto } from './dto/update-receipt-description.dto';
import { ConceptItem } from 'src/concept-items/entities/concept.entity';
export declare class ReceiptsService {
    private receiptRepository;
    private conceptItemRepository;
    private dataSource;
    constructor(receiptRepository: Repository<Receipt>, conceptItemRepository: Repository<ConceptItem>, dataSource: DataSource);
    findLast(): Promise<Receipt>;
    create(body: CreateReceiptDto): Promise<{
        cancelledBy: Receipt;
        id: number;
        number: number;
        day: import("../days/entities/day.entity").Day;
        client: import("../clients/entities/client.entity").Client;
        transferAmount: number;
        description: string;
        cash: number;
        cheques: Cheque[];
        cancelCheques: Cheque[];
        conceptItems: ConceptItem[];
        user: import("../users/entities/user.entity").User;
        cancelReceipt: Receipt;
        isActive: boolean;
        isCancelled: boolean;
    }>;
    findAll(start: Date, end: Date, client: number, take: number): Promise<Receipt[]>;
    findOne(id: number): Promise<{
        cancelledBy: Receipt;
        id: number;
        number: number;
        day: import("../days/entities/day.entity").Day;
        client: import("../clients/entities/client.entity").Client;
        transferAmount: number;
        description: string;
        cash: number;
        cheques: Cheque[];
        cancelCheques: Cheque[];
        conceptItems: ConceptItem[];
        user: import("../users/entities/user.entity").User;
        cancelReceipt: Receipt;
        isActive: boolean;
        isCancelled: boolean;
    }>;
    minuta(start: Date, end: Date, orderBy: 'receipt' | 'client', client: number): Promise<Receipt[]>;
    xubio(start: Date, end: Date): Promise<any[]>;
    update(id: number, updateReceiptDto: UpdateReceiptDto): Promise<Receipt>;
    updateDescription(id: number, updateReceiptDescription: UpdateReceiptDescriptionDto): Promise<Receipt>;
    remove(id: number): Promise<import("typeorm").DeleteResult>;
    close(id: number): Promise<{
        cancelledBy: Receipt;
        id: number;
        number: number;
        day: import("../days/entities/day.entity").Day;
        client: import("../clients/entities/client.entity").Client;
        transferAmount: number;
        description: string;
        cash: number;
        cheques: Cheque[];
        cancelCheques: Cheque[];
        conceptItems: ConceptItem[];
        user: import("../users/entities/user.entity").User;
        cancelReceipt: Receipt;
        isActive: boolean;
        isCancelled: boolean;
    }>;
    open(id: number): Promise<{
        cancelledBy: Receipt;
        id: number;
        number: number;
        day: import("../days/entities/day.entity").Day;
        client: import("../clients/entities/client.entity").Client;
        transferAmount: number;
        description: string;
        cash: number;
        cheques: Cheque[];
        cancelCheques: Cheque[];
        conceptItems: ConceptItem[];
        user: import("../users/entities/user.entity").User;
        cancelReceipt: Receipt;
        isActive: boolean;
        isCancelled: boolean;
    }>;
    cancel(id: number): Promise<{
        cancelledBy: Receipt;
        id: number;
        number: number;
        day: import("../days/entities/day.entity").Day;
        client: import("../clients/entities/client.entity").Client;
        transferAmount: number;
        description: string;
        cash: number;
        cheques: Cheque[];
        cancelCheques: Cheque[];
        conceptItems: ConceptItem[];
        user: import("../users/entities/user.entity").User;
        cancelReceipt: Receipt;
        isActive: boolean;
        isCancelled: boolean;
    }>;
}
