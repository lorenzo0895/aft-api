import { Repository } from 'typeorm';
import { CreateConceptItemDto } from './dto/create-concept-item.dto';
import { UpdateConceptItemDto } from './dto/update-concept-item.dto';
import { ConceptItem } from './entities/concept.entity';
import { Concept } from 'src/concepts/entities/concept.entity';
export declare class ConceptItemService {
    private conceptItemRepository;
    private conceptRepository;
    constructor(conceptItemRepository: Repository<ConceptItem>, conceptRepository: Repository<Concept>);
    findAll(start: Date, end: Date, client: number, take: number): Promise<ConceptItem[]>;
    findOne(id: number): Promise<ConceptItem>;
    create(body: CreateConceptItemDto): Promise<{
        concept: Concept;
        length: number;
        toString(): string;
        toLocaleString(): string;
        pop(): ConceptItem;
        push(...items: ConceptItem[]): number;
        concat(...items: ConcatArray<ConceptItem>[]): ConceptItem[];
        concat(...items: (ConceptItem | ConcatArray<ConceptItem>)[]): ConceptItem[];
        join(separator?: string): string;
        reverse(): ConceptItem[];
        shift(): ConceptItem;
        slice(start?: number, end?: number): ConceptItem[];
        sort(compareFn?: (a: ConceptItem, b: ConceptItem) => number): ConceptItem[];
        splice(start: number, deleteCount?: number): ConceptItem[];
        splice(start: number, deleteCount: number, ...items: ConceptItem[]): ConceptItem[];
        unshift(...items: ConceptItem[]): number;
        indexOf(searchElement: ConceptItem, fromIndex?: number): number;
        lastIndexOf(searchElement: ConceptItem, fromIndex?: number): number;
        every<S extends ConceptItem>(predicate: (value: ConceptItem, index: number, array: ConceptItem[]) => value is S, thisArg?: any): this is S[];
        every(predicate: (value: ConceptItem, index: number, array: ConceptItem[]) => unknown, thisArg?: any): boolean;
        some(predicate: (value: ConceptItem, index: number, array: ConceptItem[]) => unknown, thisArg?: any): boolean;
        forEach(callbackfn: (value: ConceptItem, index: number, array: ConceptItem[]) => void, thisArg?: any): void;
        map<U>(callbackfn: (value: ConceptItem, index: number, array: ConceptItem[]) => U, thisArg?: any): U[];
        filter<S_1 extends ConceptItem>(predicate: (value: ConceptItem, index: number, array: ConceptItem[]) => value is S_1, thisArg?: any): S_1[];
        filter(predicate: (value: ConceptItem, index: number, array: ConceptItem[]) => unknown, thisArg?: any): ConceptItem[];
        reduce(callbackfn: (previousValue: ConceptItem, currentValue: ConceptItem, currentIndex: number, array: ConceptItem[]) => ConceptItem): ConceptItem;
        reduce(callbackfn: (previousValue: ConceptItem, currentValue: ConceptItem, currentIndex: number, array: ConceptItem[]) => ConceptItem, initialValue: ConceptItem): ConceptItem;
        reduce<U_1>(callbackfn: (previousValue: U_1, currentValue: ConceptItem, currentIndex: number, array: ConceptItem[]) => U_1, initialValue: U_1): U_1;
        reduceRight(callbackfn: (previousValue: ConceptItem, currentValue: ConceptItem, currentIndex: number, array: ConceptItem[]) => ConceptItem): ConceptItem;
        reduceRight(callbackfn: (previousValue: ConceptItem, currentValue: ConceptItem, currentIndex: number, array: ConceptItem[]) => ConceptItem, initialValue: ConceptItem): ConceptItem;
        reduceRight<U_2>(callbackfn: (previousValue: U_2, currentValue: ConceptItem, currentIndex: number, array: ConceptItem[]) => U_2, initialValue: U_2): U_2;
        find<S_2 extends ConceptItem>(predicate: (this: void, value: ConceptItem, index: number, obj: ConceptItem[]) => value is S_2, thisArg?: any): S_2;
        find(predicate: (value: ConceptItem, index: number, obj: ConceptItem[]) => unknown, thisArg?: any): ConceptItem;
        findIndex(predicate: (value: ConceptItem, index: number, obj: ConceptItem[]) => unknown, thisArg?: any): number;
        fill(value: ConceptItem, start?: number, end?: number): ConceptItem[];
        copyWithin(target: number, start: number, end?: number): ConceptItem[];
        entries(): IterableIterator<[number, ConceptItem]>;
        keys(): IterableIterator<number>;
        values(): IterableIterator<ConceptItem>;
        includes(searchElement: ConceptItem, fromIndex?: number): boolean;
        flatMap<U_3, This = undefined>(callback: (this: This, value: ConceptItem, index: number, array: ConceptItem[]) => U_3 | readonly U_3[], thisArg?: This): U_3[];
        flat<A, D extends number = 1>(this: A, depth?: D): FlatArray<A, D>[];
        [Symbol.iterator](): IterableIterator<ConceptItem>;
        [Symbol.unscopables](): {
            copyWithin: boolean;
            entries: boolean;
            fill: boolean;
            find: boolean;
            findIndex: boolean;
            keys: boolean;
            values: boolean;
        };
        at(index: number): ConceptItem;
    }[]>;
    update(id: number, updateConceptDto: UpdateConceptItemDto): Promise<{
        concept: Concept;
        id: number;
        receipt: import("../receipts/entities/receipt.entity").Receipt;
        amount: number;
        description: string;
        isActive: boolean;
    }>;
    close(id: number): Promise<ConceptItem>;
    open(id: number): Promise<ConceptItem>;
    remove(id: number): Promise<import("typeorm").DeleteResult>;
}
